{
  "plugins": [
    {
      "name": "inject",
      "desc": "Dependency injection and Inversion of control (@halsp/inject)",
      "default": true
    },
    {
      "name": "router",
      "desc": "Router (@halsp/router)",
      "default": true
    },
    {
      "name": "view",
      "desc": "Page rendering (@halsp/view)"
    },
    {
      "name": "mva",
      "desc": "MVA Framework (@halsp/mva)",
      "when": "http"
    },
    {
      "name": "pipe",
      "desc": "Pipe (Used to format parameters) (@halsp/pipe)",
      "default": true
    },
    {
      "name": "filter",
      "desc": "Filter (Used to intercept requests) (@halsp/filter)"
    },
    {
      "name": "validator",
      "desc": "Verify request parameters (@halsp/validator)"
    },
    {
      "name": "testing",
      "desc": "Unit testing (@halsp/testing)"
    },
    {
      "name": "static",
      "desc": "Static resources (@halsp/static)",
      "when": "http"
    },
    {
      "name": "swagger",
      "desc": "Swagger pages (@halsp/swagger)",
      "when": "http",
      "default": true
    },
    {
      "name": "jwt",
      "desc": "JWT authentication middleware (@halsp/jwt)"
    },
    {
      "name": "env",
      "desc": "Environment configuration (@halsp/env)"
    },
    {
      "name": "logger",
      "desc": "Logger (@halsp/logger)"
    },
    {
      "name": "ws",
      "desc": "WebSocket (@halsp/ws)",
      "when": "http"
    },
    {
      "name": "cors",
      "desc": "CORS (@halsp/cors)",
      "when": "http"
    }
  ],
  "envs": [
    {
      "desc": "Native",
      "flag": "native",
      "plugin": "native"
    },
    {
      "desc": "Tencent Cloud Function",
      "pickMessage": "Select function type",
      "children": [
        {
          "desc": "Event",
          "flag": "lambda",
          "plugin": "lambda"
        },
        {
          "desc": "Web Http",
          "flag": "sls-http-tcloud",
          "plugin": "native"
        }
      ]
    },
    {
      "desc": "Azure Function App",
      "flag": "azure",
      "plugin": "lambda"
    },
    {
      "desc": "AWS Lambda",
      "flag": "lambda",
      "plugin": "lambda"
    },
    {
      "desc": "Aliyun Function",
      "pickMessage": "Select function type",
      "children": [
        {
          "desc": "Handling event requests",
          "flag": "lambda",
          "plugin": "lambda"
        },
        {
          "desc": "HTTP Requests",
          "flag": "alifc",
          "plugin": "alifc"
        }
      ]
    },
    {
      "desc": "Huawei Cloud Function Workflow",
      "pickMessage": "Select function type",
      "children": [
        {
          "desc": "Event Function",
          "flag": "lambda",
          "plugin": "lambda"
        },
        {
          "desc": "Web Function",
          "flag": "sls-http-huawei",
          "plugin": "native"
        }
      ]
    },
    {
      "desc": "Microservice",
      "pickMessage": "Select the communication mode of Microservices",
      "children": [
        {
          "desc": "TCP",
          "flag": "micro-tcp",
          "plugin": "micro-tcp"
        },
        {
          "desc": "gRPC",
          "flag": "micro-grpc",
          "plugin": "micro-grpc"
        },
        {
          "desc": "MQTT",
          "flag": "micro-mqtt",
          "plugin": "micro-mqtt"
        },
        {
          "desc": "Redis",
          "flag": "micro-redis",
          "plugin": "micro-redis"
        },
        {
          "desc": "NATS",
          "flag": "micro-nats",
          "plugin": "micro-nats"
        }
      ]
    }
  ],
  "dependencies": {
    "ejs": "view",
    "class-validator": "validator"
  },
  "files": {
    "static/*": "static",
    "src/views/*": "view",
    ".env": "env",
    ".env.development": "env",
    "protos/*": "micro-grpc"
  },
  "devDependencies": {
    "@halsp/native": "lambda||alifc"
  }
}
